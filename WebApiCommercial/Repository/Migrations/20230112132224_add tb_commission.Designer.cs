// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

namespace Repository.Migrations
{
    [DbContext(typeof(ContextBase))]
    [Migration("20230112132224_add tb_commission")]
    partial class addtb_commission
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Bairro")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Complement")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("tb_client");
                });

            modelBuilder.Entity("Model.Moves.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("tb_budget");
                });

            modelBuilder.Entity("Model.Moves.BudgetItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBudget")
                        .HasColumnType("int");

                    b.Property<int>("IdItem")
                        .HasColumnType("int");

                    b.Property<int>("TypeItem")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdBudget");

                    b.ToTable("tb_budgetItems");
                });

            modelBuilder.Entity("Model.Moves.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<int?>("IdSeller")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdSeller");

                    b.ToTable("tb_sale");
                });

            modelBuilder.Entity("Model.Moves.SaleItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdSale")
                        .HasColumnType("int");

                    b.Property<int?>("IdService")
                        .HasColumnType("int");

                    b.Property<DateTime>("InclusionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdSale");

                    b.HasIndex("IdService");

                    b.ToTable("tb_saleItems");
                });

            modelBuilder.Entity("Model.Moves.ServicesProvision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdBudget")
                        .HasColumnType("int");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdBudget");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdCompany");

                    b.ToTable("tb_serviceProvision");
                });

            modelBuilder.Entity("Model.Moves.ServicesProvisionItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdItem")
                        .HasColumnType("int");

                    b.Property<int>("IdServiceProvision")
                        .HasColumnType("int");

                    b.Property<int>("TypeItem")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdServiceProvision");

                    b.ToTable("tb_servicesProvisionItems");
                });

            modelBuilder.Entity("Model.Registrations.Commission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommissionDay")
                        .HasColumnType("int");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<int>("IdCostCenter")
                        .HasColumnType("int");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdSalesman")
                        .HasColumnType("int");

                    b.Property<int?>("IdService")
                        .HasColumnType("int");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceProvidedId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("ServiceProvidedId");

                    b.ToTable("Commission");
                });

            modelBuilder.Entity("Model.Registrations.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CorporateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tb_company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorporateName = "Empresa Padrão"
                        });
                });

            modelBuilder.Entity("Model.Registrations.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CostCenter");
                });

            modelBuilder.Entity("Model.Registrations.DescriptionFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descriptionProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("groupItems")
                        .HasColumnType("int");

                    b.Property<int>("idCompany")
                        .HasColumnType("int");

                    b.Property<string>("valueProduct")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("idCompany");

                    b.ToTable("tb_descriptionFiles");
                });

            modelBuilder.Entity("Model.Registrations.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Files")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("IdDescriptionFiles")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDescriptionFiles");

                    b.ToTable("tb_file");
                });

            modelBuilder.Entity("Model.Registrations.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("tb_product");
                });

            modelBuilder.Entity("Model.Registrations.Salesman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bairro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("tb_salesman");
                });

            modelBuilder.Entity("Model.Registrations.ServiceProvided", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("tb_ServiceProvided");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("tb_user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1983, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@padrao.com.br",
                            IdCompany = 1,
                            Name = "Admin",
                            Password = ""
                        });
                });

            modelBuilder.Entity("Model.Client", b =>
                {
                    b.HasOne("Model.Registrations.Company", "Company")
                        .WithMany("Clients")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.Moves.Budget", b =>
                {
                    b.HasOne("Model.Registrations.Company", "Company")
                        .WithMany("Budgets")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.Moves.BudgetItems", b =>
                {
                    b.HasOne("Model.Moves.Budget", "Budget")
                        .WithMany("BudgetItems")
                        .HasForeignKey("IdBudget")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("Model.Moves.Sale", b =>
                {
                    b.HasOne("Model.Client", "Client")
                        .WithMany("Sale")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Registrations.Company", "Company")
                        .WithMany("Sale")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Registrations.Salesman", "Salesman")
                        .WithMany("Sale")
                        .HasForeignKey("IdSeller");

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("Salesman");
                });

            modelBuilder.Entity("Model.Moves.SaleItems", b =>
                {
                    b.HasOne("Model.Registrations.Product", "Product")
                        .WithMany("SaleItems")
                        .HasForeignKey("IdProduct");

                    b.HasOne("Model.Moves.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("IdSale")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Registrations.ServiceProvided", "ServiceProvided")
                        .WithMany("SaleItems")
                        .HasForeignKey("IdService");

                    b.Navigation("Product");

                    b.Navigation("Sale");

                    b.Navigation("ServiceProvided");
                });

            modelBuilder.Entity("Model.Moves.ServicesProvision", b =>
                {
                    b.HasOne("Model.Moves.Budget", "Budget")
                        .WithMany("ServiceProvisions")
                        .HasForeignKey("IdBudget");

                    b.HasOne("Model.Client", "Client")
                        .WithMany("ServiceProvisions")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Registrations.Company", "Company")
                        .WithMany("ServiceProvisions")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.Moves.ServicesProvisionItems", b =>
                {
                    b.HasOne("Model.Moves.ServicesProvision", "ServiceProvision")
                        .WithMany("ServicesProvisionItems")
                        .HasForeignKey("IdServiceProvision")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceProvision");
                });

            modelBuilder.Entity("Model.Registrations.Commission", b =>
                {
                    b.HasOne("Model.Registrations.CostCenter", "CostCenter")
                        .WithMany("Commissions")
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Model.Registrations.Product", "Product")
                        .WithMany("Commissions")
                        .HasForeignKey("ProductId");

                    b.HasOne("Model.Registrations.Salesman", "Salesman")
                        .WithMany("Commissions")
                        .HasForeignKey("SalesmanId");

                    b.HasOne("Model.Registrations.ServiceProvided", "ServiceProvided")
                        .WithMany("Commissions")
                        .HasForeignKey("ServiceProvidedId");

                    b.Navigation("CostCenter");

                    b.Navigation("Product");

                    b.Navigation("Salesman");

                    b.Navigation("ServiceProvided");
                });

            modelBuilder.Entity("Model.Registrations.DescriptionFiles", b =>
                {
                    b.HasOne("Model.Registrations.Company", "Company")
                        .WithMany("DescriptionFiles")
                        .HasForeignKey("idCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.Registrations.File", b =>
                {
                    b.HasOne("Model.Registrations.DescriptionFiles", "DescriptionFiles")
                        .WithMany("Files")
                        .HasForeignKey("IdDescriptionFiles")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DescriptionFiles");
                });

            modelBuilder.Entity("Model.Registrations.Product", b =>
                {
                    b.HasOne("Model.Registrations.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.Registrations.Salesman", b =>
                {
                    b.HasOne("Model.Registrations.Company", "Company")
                        .WithMany("Salesmen")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.Registrations.ServiceProvided", b =>
                {
                    b.HasOne("Model.Registrations.Company", "Company")
                        .WithMany("ServiceProvideds")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.HasOne("Model.Registrations.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Model.Client", b =>
                {
                    b.Navigation("Sale");

                    b.Navigation("ServiceProvisions");
                });

            modelBuilder.Entity("Model.Moves.Budget", b =>
                {
                    b.Navigation("BudgetItems");

                    b.Navigation("ServiceProvisions");
                });

            modelBuilder.Entity("Model.Moves.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Model.Moves.ServicesProvision", b =>
                {
                    b.Navigation("ServicesProvisionItems");
                });

            modelBuilder.Entity("Model.Registrations.Company", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Clients");

                    b.Navigation("DescriptionFiles");

                    b.Navigation("Products");

                    b.Navigation("Sale");

                    b.Navigation("Salesmen");

                    b.Navigation("ServiceProvideds");

                    b.Navigation("ServiceProvisions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Model.Registrations.CostCenter", b =>
                {
                    b.Navigation("Commissions");
                });

            modelBuilder.Entity("Model.Registrations.DescriptionFiles", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Model.Registrations.Product", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Model.Registrations.Salesman", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Model.Registrations.ServiceProvided", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
